import logging
import telegram
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import os
from dotenv import load_dotenv
import datetime
import time
from db import insert_data_to
from info import *

load_dotenv()
BOT_TOKEN = f"{os.getenv('BOT_TOKEN')}"
bot = telegram.Bot(token=BOT_TOKEN)
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

ASK_NAME_1, ASK_NAME, ASK_BIRTH_YEAR, ASK_EDUCATION, ASK_REGION, ASK_DISTRICT, ASK_PHONE, ASK_PHONE_MANUAL,\
ASK_ADDITIONAL_PHONE, ASK_MARITAL_STATUS, ASK_WORKPLACE, ASK_EXPECTED_SALARY, ASK_EXPECTED_LENGTH, \
ASK_LANGUAGE, ASK_LANGUAGE_LEVEL, ASK_ADDITIONAL_LANGUAGE, ASK_ADDITIONAL_LANGUAGE_LEVEL, \
ASK_ADDITIONAL_LANGUAGE_LEVEL_LEVEL, ASK_IT_KNOWLEDGE, ASK_SOURCE, CONFIRMATION = range(21)

# Define options for responses
OPTIONS_OF = ["“≤–∞", "–ô—û“õ"]
EDUCATION_OPTIONS = ["–é—Ä—Ç–∞ –º–∞—Ö—Å—É—Å", "–é—Ä—Ç–∞ —Ç–∞—ä–ª–∏–º", "–û–ª–∏–π"]
REGION_OPTIONS = ["–¢–æ—à–∫–µ–Ω—Ç —à–∞“≥–∞—Ä", "–ê–Ω–¥–∏–∂–æ–Ω –≤–∏–ª–æ—è—Ç–∏", "–ë—É—Ö–æ—Ä–æ –≤–∏–ª–æ—è—Ç–∏", "–ñ–∏–∑–∑–∞—Ö –≤–∏–ª–æ—è—Ç–∏", "“ö–∞—à“õ–∞–¥–∞—Ä—ë –≤–∏–ª–æ—è—Ç–∏", "–ù–∞–≤–æ–∏–π –≤–∏–ª–æ—è—Ç–∏", "–ù–∞–º–∞–Ω–≥–∞–Ω –≤–∏–ª–æ—è—Ç–∏", "–°–∞–º–∞—Ä“õ–∞–Ω–¥ –≤–∏–ª–æ—è—Ç–∏",
                  "–°—É—Ä—Ö–æ–Ω–¥–∞—Ä—ë –≤–∏–ª–æ—è—Ç–∏", "–°–∏—Ä–¥–∞—Ä—ë –≤–∏–ª–æ—è—Ç–∏", "–¢–æ—à–∫–µ–Ω—Ç –≤–∏–ª–æ—è—Ç–∏", "–§–∞—Ä“ì–æ–Ω–∞ –≤–∏–ª–æ—è—Ç–∏", "–•–æ—Ä–∞–∑–º –≤–∏–ª–æ—è—Ç–∏", "“ö–æ—Ä–∞“õ–∞–ª–ø–æ“ì–∏—Å—Ç–æ–Ω –†–µ—Å–ø—É–±–ª–∏–∫–∞—Å–∏"]
DISTRICT = {
    "–¢–æ—à–∫–µ–Ω—Ç —à–∞“≥–∞—Ä": [
        "–ë–µ–∫—Ç–µ–º–∏—Ä —Ç—É–º–∞–Ω–∏", "–ú–∏—Ä–æ–±–æ–¥ —Ç—É–º–∞–Ω–∏", "–ú–∏—Ä–∑–æ –£–ª—É“ì–±–µ–∫ —Ç—É–º–∞–Ω–∏",
        "–°–µ—Ä–≥–µ–ª–∏ —Ç—É–º–∞–Ω–∏", "–£—á—Ç–µ–ø–∞ —Ç—É–º–∞–Ω–∏", "–ß–∏–ª–æ–Ω–∑–æ—Ä —Ç—É–º–∞–Ω–∏",
        "–®–∞–π—Ö–æ–Ω—Ç–æ“≥—É—Ä —Ç—É–º–∞–Ω–∏", "–Æ–Ω—É—Å–æ–±–æ–¥ —Ç—É–º–∞–Ω–∏", "–Ø—à–Ω–æ–±–æ–¥ —Ç—É–º–∞–Ω–∏",
        "–û–ª–º–∞–∑–æ—Ä —Ç—É–º–∞–Ω–∏", "–Ø–∫–∫–∞—Å–∞—Ä–æ–π —Ç—É–º–∞–Ω–∏"
    ],
    "–¢–æ—à–∫–µ–Ω—Ç –≤–∏–ª–æ—è—Ç–∏": [
        "–ë–µ–∫–æ–±–æ–¥ —Ç—É–º–∞–Ω–∏", "–ë—û—Å—Ç–æ–Ω–ª–∏“õ —Ç—É–º–∞–Ω–∏", "–ë—û–∫–∞ —Ç—É–º–∞–Ω–∏",
        "–ó–∞–Ω–≥–∏–æ—Ç–∞ —Ç—É–º–∞–Ω–∏", "“ö–∏–±—Ä–∞–π —Ç—É–º–∞–Ω–∏", "“ö—É–π–∏ –ß–∏—Ä—á–∏“õ —Ç—É–º–∞–Ω–∏",
        "–ü–∞—Ä–∫–µ–Ω—Ç —Ç—É–º–∞–Ω–∏", "–ü–∏—Å–∫–µ–Ω—Ç —Ç—É–º–∞–Ω–∏", "–¢–æ—à–∫–µ–Ω—Ç —Ç—É–º–∞–Ω–∏",
        "–é—Ä—Ç–∞ –ß–∏—Ä—á–∏“õ —Ç—É–º–∞–Ω–∏", "–ß–∏–Ω–æ–∑ —Ç—É–º–∞–Ω–∏", "–Æ“õ–æ—Ä–∏ –ß–∏—Ä—á–∏“õ —Ç—É–º–∞–Ω–∏"
    ],
    "–ê–Ω–¥–∏–∂–æ–Ω –≤–∏–ª–æ—è—Ç–∏": [
        "–ê—Å–∞“õ–∞ —Ç—É–º–∞–Ω–∏", "–ë–∞–ª–∏“õ—á–∏ —Ç—É–º–∞–Ω–∏", "–ë—û–∑ —Ç—É–º–∞–Ω–∏",
        "–ë—É–ª–æ“õ–±–æ—à–∏ —Ç—É–º–∞–Ω–∏", "–ñ–∞–ª–∞“õ—É–¥—É“õ —Ç—É–º–∞–Ω–∏", "“ö—û—Ä“ì–æ–Ω—Ç–µ–ø–∞ —Ç—É–º–∞–Ω–∏",
        "–ú–∞—Ä“≥–∞–º–∞—Ç —Ç—É–º–∞–Ω–∏", "–ü–∞—Ö—Ç–∞–æ–±–æ–¥ —Ç—É–º–∞–Ω–∏", "–û–ª—Ç–∏–Ω–∫—û–ª —Ç—É–º–∞–Ω–∏",
        "–•—û–∂–∞–æ–±–æ–¥ —Ç—É–º–∞–Ω–∏", "–®–∞“≥—Ä–∏—Ö–æ–Ω —Ç—É–º–∞–Ω–∏"
    ],
    "–ë—É—Ö–æ—Ä–æ –≤–∏–ª–æ—è—Ç–∏": [
        "–û–ª–æ—Ç —Ç—É–º–∞–Ω–∏", "–ë—É—Ö–æ—Ä–æ —Ç—É–º–∞–Ω–∏", "–í–æ–±–∫–µ–Ω—Ç —Ç—É–º–∞–Ω–∏",
        "“í–∏–∂–¥—É–≤–æ–Ω —Ç—É–º–∞–Ω–∏", "“ö–æ—Ä–∞–∫—û–ª —Ç—É–º–∞–Ω–∏", "“ö–æ—Ä–æ–≤—É–ª–±–æ–∑–æ—Ä —Ç—É–º–∞–Ω–∏",
        "–ü–µ—à–∫—û —Ç—É–º–∞–Ω–∏", "–†–æ–º–∏—Ç–∞–Ω —Ç—É–º–∞–Ω–∏", "–®–æ—Ñ–∏—Ä–∫–æ–Ω —Ç—É–º–∞–Ω–∏",
        "–ñ–æ–Ω–¥–æ—Ä —Ç—É–º–∞–Ω–∏"
    ],
    "–ñ–∏–∑–∑–∞—Ö –≤–∏–ª–æ—è—Ç–∏": [
        "–ê—Ä–Ω–∞—Å–æ–π —Ç—É–º–∞–Ω–∏", "–ë–∞—Ö–º–∞–ª —Ç—É–º–∞–Ω–∏", "“í–∞–ª–ª–∞–æ—Ä–æ–ª —Ç—É–º–∞–Ω–∏",
        "–î—û—Å—Ç–ª–∏–∫ —Ç—É–º–∞–Ω–∏", "–ó–∞—Ä–±–¥–æ—Ä —Ç—É–º–∞–Ω–∏", "–ó–∞—Ñ–∞—Ä–æ–±–æ–¥ —Ç—É–º–∞–Ω–∏",
        "–ó–æ–º–∏–Ω —Ç—É–º–∞–Ω–∏", "–ú–∏—Ä–∑–∞—á—û–ª —Ç—É–º–∞–Ω–∏", "–ü–∞—Ö—Ç–∞–∫–æ—Ä —Ç—É–º–∞–Ω–∏",
        "–§–æ—Ä–∏—à —Ç—É–º–∞–Ω–∏", "–Ø–Ω–≥–∏“õ—û—Ä“ì–æ–Ω —Ç—É–º–∞–Ω–∏"
    ],
    "“ö–∞—à“õ–∞–¥–∞—Ä—ë –≤–∏–ª–æ—è—Ç–∏": [
        "“í—É–∑–æ—Ä —Ç—É–º–∞–Ω–∏", "–î–µ“≥“õ–æ–Ω–æ–±–æ–¥ —Ç—É–º–∞–Ω–∏", "“ö–∞—Ä—à–∏ —Ç—É–º–∞–Ω–∏",
        "–ö–∏—Ç–æ–± —Ç—É–º–∞–Ω–∏", "–ö–∞—Å–±–∏ —Ç—É–º–∞–Ω–∏", "“ö–∞–º–∞—à–∏ —Ç—É–º–∞–Ω–∏",
        "–ú—É–±–æ—Ä–∞–∫ —Ç—É–º–∞–Ω–∏", "–ú–∏—Ä–∏—à–∫–æ—Ä —Ç—É–º–∞–Ω–∏", "–ù–∏—à–æ–Ω —Ç—É–º–∞–Ω–∏",
        "–ß–∏—Ä–æ“õ—á–∏ —Ç—É–º–∞–Ω–∏", "–®–∞“≥—Ä–∏—Å–∞–±–∑ —Ç—É–º–∞–Ω–∏", "–Ø–∫–∫–∞–±–æ“ì —Ç—É–º–∞–Ω–∏"
    ],
    "–ù–∞–≤–æ–∏–π –≤–∏–ª–æ—è—Ç–∏": [
        "–ö–æ–Ω–∏–º–µ—Ö —Ç—É–º–∞–Ω–∏", "“ö–∞—Ä–º–æ–Ω–∏ —Ç—É–º–∞–Ω–∏", "–ù–∞–≤–±–∞“≥–æ—Ä —Ç—É–º–∞–Ω–∏",
        "–ù—É—Ä–æ—Ç–∞ —Ç—É–º–∞–Ω–∏", "–¢–æ–º–¥–∏ —Ç—É–º–∞–Ω–∏", "–£—á“õ—É–¥—É“õ —Ç—É–º–∞–Ω–∏",
        "–•–∞—Ç–∏—Ä—á–∏ —Ç—É–º–∞–Ω–∏", "–ó–∞—Ä–∞—Ñ—à–æ–Ω —Ç—É–º–∞–Ω–∏"
    ],
    "–ù–∞–º–∞–Ω–≥–∞–Ω –≤–∏–ª–æ—è—Ç–∏": [
        "–ö–æ—Å–æ–Ω—Å–æ–π —Ç—É–º–∞–Ω–∏", "–ú–∏–Ω–≥–±—É–ª–æ“õ —Ç—É–º–∞–Ω–∏", "–ù–æ—Ä–∏–Ω —Ç—É–º–∞–Ω–∏",
        "–ù–∞–º–∞–Ω–≥–∞–Ω —Ç—É–º–∞–Ω–∏", "–ü–æ–ø —Ç—É–º–∞–Ω–∏", "–¢—û—Ä–∞“õ—û—Ä“ì–æ–Ω —Ç—É–º–∞–Ω–∏",
        "–£—á“õ—û—Ä“ì–æ–Ω —Ç—É–º–∞–Ω–∏", "–ßortoq —Ç—É–º–∞–Ω–∏", "–Ø–Ω–≥–∏“õ—û—Ä“ì–æ–Ω —Ç—É–º–∞–Ω–∏"
    ],
    "–°–∞–º–∞—Ä“õ–∞–Ω–¥ –≤–∏–ª–æ—è—Ç–∏": [
        "–ë—É–ª—É–Ω“ì—É—Ä —Ç—É–º–∞–Ω–∏", "–ñ–æ–º–±–æ–π —Ç—É–º–∞–Ω–∏", "–ò—à—Ç–∏—Ö–æ–Ω —Ç—É–º–∞–Ω–∏",
        "–ö–∞—Ç—Ç–∞“õ—û—Ä“ì–æ–Ω —Ç—É–º–∞–Ω–∏", "–ù—É—Ä–æ–±–æ–¥ —Ç—É–º–∞–Ω–∏", "–û“õ–¥–∞—Ä—ë —Ç—É–º–∞–Ω–∏",
        "–ü–∞–π–∞—Ä–∏“õ —Ç—É–º–∞–Ω–∏", "–ü–∞—Å—Ç–¥–∞—Ä“ì–æ–º —Ç—É–º–∞–Ω–∏", "–°–∞–º–∞—Ä“õ–∞–Ω–¥ —Ç—É–º–∞–Ω–∏",
        "–¢–æ–π–ª–æ“õ —Ç—É–º–∞–Ω–∏", "–£—Ä–≥—É—Ç —Ç—É–º–∞–Ω–∏"
    ],
    "–°—É—Ä—Ö–æ–Ω–¥–∞—Ä—ë –≤–∏–ª–æ—è—Ç–∏": [
        "–û–ª—Ç–∏–Ω—Å–æ–π —Ç—É–º–∞–Ω–∏", "–ê–Ω–≥–æ—Ä —Ç—É–º–∞–Ω–∏", "–ë–æ–π—Å—É–Ω —Ç—É–º–∞–Ω–∏",
        "–î–µ–Ω–æ–≤ —Ç—É–º–∞–Ω–∏", "–ñ–∞—Ä“õ—û—Ä“ì–æ–Ω —Ç—É–º–∞–Ω–∏", "“ö–∏–∑–∏—Ä–∏“õ —Ç—É–º–∞–Ω–∏",
        "“ö—É–º“õ—û—Ä“ì–æ–Ω —Ç—É–º–∞–Ω–∏", "–ú—É–∑—Ä–∞–±–æ—Ç —Ç—É–º–∞–Ω–∏", "–°–∞—Ä–∏–æ—Å–∏—ë —Ç—É–º–∞–Ω–∏",
        "–¢–µ—Ä–º–∏–∑ —Ç—É–º–∞–Ω–∏", "–£–∑—É–Ω —Ç—É–º–∞–Ω–∏", "–®—û—Ä—á–∏ —Ç—É–º–∞–Ω–∏"
    ],
    "–°–∏—Ä–¥–∞—Ä—ë –≤–∏–ª–æ—è—Ç–∏": [
        "–û“õ–æ–ª—Ç–∏–Ω —Ç—É–º–∞–Ω–∏", "–ë—û—ë–≤—É—Ç —Ç—É–º–∞–Ω–∏", "–ì—É–ª–∏—Å—Ç–æ–Ω —Ç—É–º–∞–Ω–∏",
        "–ú–∏—Ä–∑–∞—á—û–ª —Ç—É–º–∞–Ω–∏", "–°–∞–π—Ö—É–Ω–æ–±–æ–¥ —Ç—É–º–∞–Ω–∏", "–°–∞—Ä–¥–æ–±–∞ —Ç—É–º–∞–Ω–∏",
        "–•–æ–≤–æ—Å —Ç—É–º–∞–Ω–∏"
    ],
    "–§–∞—Ä“ì–æ–Ω–∞ –≤–∏–ª–æ—è—Ç–∏": [
        "–û–ª—Ç–∏–∞—Ä–∏“õ —Ç—É–º–∞–Ω–∏", "–ë–æ“ì–¥–æ–¥ —Ç—É–º–∞–Ω–∏", "–ë–µ—à–∞—Ä–∏“õ —Ç—É–º–∞–Ω–∏",
        "–ë—É–≤–∞–π–¥–∞ —Ç—É–º–∞–Ω–∏", "–î–∞–Ω“ì–∞—Ä–∞ —Ç—É–º–∞–Ω–∏", "“ö—É–≤–∞ —Ç—É–º–∞–Ω–∏",
        "–†–∏—à—Ç–æ–Ω —Ç—É–º–∞–Ω–∏", "–°—û—Ö —Ç—É–º–∞–Ω–∏", "–¢–æ—à–ª–æ“õ —Ç—É–º–∞–Ω–∏",
        "–é–∑–±–µ–∫–∏—Å—Ç–æ–Ω —Ç—É–º–∞–Ω–∏", "–§–∞—Ä“ì–æ–Ω–∞ —Ç—É–º–∞–Ω–∏", "–§—É—Ä“õ–∞—Ç —Ç—É–º–∞–Ω–∏"
    ],
    "–•–æ—Ä–∞–∑–º –≤–∏–ª–æ—è—Ç–∏": [
        "–ë–æ“ì–æ—Ç —Ç—É–º–∞–Ω–∏", "–ì—É—Ä–ª–∞–Ω —Ç—É–º–∞–Ω–∏", "–•–æ–Ω“õ–∞ —Ç—É–º–∞–Ω–∏",
        "–®–æ–≤–æ—Ç —Ç—É–º–∞–Ω–∏", "–£—Ä–≥–∞–Ω—á —Ç—É–º–∞–Ω–∏", "–Ø–Ω–≥–∏–±–æ–∑–æ—Ä —Ç—É–º–∞–Ω–∏",
        "“≤–∞–∑–æ—Ä–∞—Å–ø —Ç—É–º–∞–Ω–∏", "“ö—û—à–∫—û–ø–∏—Ä —Ç—É–º–∞–Ω–∏"
    ],
    "“ö–æ—Ä–∞“õ–∞–ª–ø–æ“ì–∏—Å—Ç–æ–Ω –†–µ—Å–ø—É–±–ª–∏–∫–∞—Å–∏": [
        "–ê–º—É–¥–∞—Ä—ë —Ç—É–º–∞–Ω–∏", "–ë–µ—Ä—É–Ω–∏–π —Ç—É–º–∞–Ω–∏", "“ö–æ—Ä–∞—û–∑–∞–∫ —Ç—É–º–∞–Ω–∏",
        "–ö–µ–≥–µ–π–ª–∏ —Ç—É–º–∞–Ω–∏", "“ö—û–Ω“ì–∏—Ä–æ—Ç —Ç—É–º–∞–Ω–∏", "–ú—û–π–Ω–æ“õ —Ç—É–º–∞–Ω–∏",
        "–ù—É–∫—É—Å —Ç—É–º–∞–Ω–∏", "–¢–∞—Ö—Ç–∞–∫—û–ø–∏—Ä —Ç—É–º–∞–Ω–∏", "–¢–∞—Ö–∏–æ—Ç–æ—à —Ç—É–º–∞–Ω–∏",
        "–•—û–∂–∞–π–ª–∏ —Ç—É–º–∞–Ω–∏", "–ß–∏–º–±–æ–π —Ç—É–º–∞–Ω–∏", "–®—É–º–∞–Ω–∞–π —Ç—É–º–∞–Ω–∏"
    ]
}

PHONE_OPTIONS = [KeyboardButton("üì≤ –ö–æ–Ω—Ç–∞–∫—Ç–∏–º–Ω–∏ —É–ª–∞—à–∏—à", request_contact=True)]
MARRITAL_STATUS_OPTIONS = ["–Å–ª“ì–∏–∑", "–û–∏–ª–∞–ª–∏"]
EXPECTED_SALARY_OPTIONS = ["1,000,000 - 3,000,000 UZS", "3,000,000 - 5,000,000 UZS", "+5,000,000 UZS"]
EXPECTED_LENGTH_OPTIONS = ["1 –π–∏–ª–≥–∞—á–∞", "3 –π–∏–ª–≥–∞—á–∞", "5 –π–∏–ª –≤–∞ —É–Ω–¥–∞–Ω –∫—û–ø—Ä–æ“õ"]
LANGUAGE_OPTIONS = ["–é–∑–±–µ–∫", "–†—É—Å", "–ò–Ω–≥–ª–∏–∑", "–ë–æ—à“õ–∞"]
IT_KNOWLEDGE_OPTIONS = ["–ë–∏–ª–º–∞–π–º–∞–Ω", "“ö–æ–Ω–∏“õ–∞—Ä–ª–∏", "–Ø—Ö—à–∏", "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª"]
SOURCE_OPTIONS = ["–î—û—Å—Ç–∏–º–¥–∞–Ω", "–û–∏–ª–∞ –∞—ä–∑–æ–ª–∞—Ä–∏–º–¥–∞–Ω", "–ò–∂—Ç–∏–º–æ–∏–π —Ç–∞—Ä–º–æ“õ–ª–∞—Ä–¥–∞–Ω", "–†–µ–∫–ª–∞–º–∞ –≤–∞ —ç—ä–ª–æ–Ω–ª–∞—Ä–¥–∞–Ω", "–ë–æ—à“õ–∞"]

help_text = (
    "–°–∏–∑–≥–∞ —ë—Ä–¥–∞–º –±–µ—Ä–∏—à–∏ –º—É–º–∫–∏–Ω –±—û–ª–≥–∞–Ω –±—É–π—Ä—É“õ–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏:\n"
    "/start - –ë–æ—Ç–Ω–∏ –∏—à–≥–∞ —Ç—É—à–∏—Ä–∏—à\n"
    "/help - –ë–æ—Ç–¥–∞–Ω —ë—Ä–¥–∞–º —Å—û—Ä–∞—à\n"
    "–°–∏–∑–≥–∞ —ë—Ä–¥–∞–º –±–µ—Ä–∏—à–¥–∞–Ω –º–∞–º–Ω—É–Ω–º–∏–∑!"
)

async def handle_update(data):

    if 'message' in data:
        chat_id = data['message']['chat']['id']
        message_text = data['message']['text']

        if message_text == "/help":
            await bot.send_message(chat_id=chat_id, text=help_text)
        else:
            await bot.send_message(chat_id=chat_id, text="Hello! You sent: " + message_text)
    print("Received data:", data)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(help_text)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.from_user.username
    if username:
        context.user_data["username"] = f"@{username}"
    else:
        context.user_data["username"] = f"N/A"
    await update.message.reply_text("–ñ–∞—Ä–∞—ë–Ω–Ω–∏ –±–æ—à–ª–∞—à —É—á—É–Ω \"–ê—Ä–∏–∑–∞–Ω–∏ —Ç—û–ª–¥–∏—Ä–∏—à\" —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥.\n–ê—Ä–∏–∑–∞ “≥–æ–ª–∞—Ç–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à —É—á—É–Ω \"–ê—Ä–∏–∑–∞–Ω–∏ “õ–∞–π—Ç–∞ –∫—û—Ä–∏–± —á–∏“õ–∏—à\" —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥.",
                                    reply_markup=ReplyKeyboardMarkup([["–ê—Ä–∏–∑–∞–Ω–∏ —Ç—û–ª–¥–∏—Ä–∏—à"],["–ê—Ä–∏–∑–∞–Ω–∏ “õ–∞–π—Ç–∞ –∫—û—Ä–∏–± —á–∏“õ–∏—à"]], resize_keyboard=True, one_time_keyboard=True))
    return ASK_NAME_1

async def name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name_input = update.message.text
    if name_input == "–ê—Ä–∏–∑–∞–Ω–∏ —Ç—û–ª–¥–∏—Ä–∏—à":
        await update.message.reply_text("–¢—û–ª–∏“õ –∏—Å–º-—à–∞—Ä–∏—Ñ–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥: ")
        return ASK_NAME
    elif name_input == "–ê—Ä–∏–∑–∞–Ω–∏ “õ–∞–π—Ç–∞ –∫—û—Ä–∏–± —á–∏“õ–∏—à":
        await update.message.reply_text(f"{context.user_data}")
        return ASK_NAME_1
    else:
        return ASK_NAME_1


async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name_2 = update.message.text
    if not name_2.isdigit():
        context.user_data['Name'] = name_2
        await update.message.reply_text("üìÖ –¢—É“ì–∏–ª–≥–∞–Ω —Å–∞–Ω–∞–Ω–≥–∏–∑–Ω–∏ “õ—É–π–∏–¥–∞–≥–∏ —Ç–∞—Ä—Ç–∏–±–¥–∞ –∫–∏—Ä–∏—Ç–∏–Ω–≥: \n–ù–∞–º—É–Ω–∞: 29-10-2004")
        return ASK_BIRTH_YEAR
    else:
        await update.message.reply_text("–ò—Å–º-—à–∞—Ä–∏—Ñ–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ò–ª—Ç–∏–º–æ—Å “õ–∞–π—Ç–∞–¥–∞–Ω —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥‚ùó")
        return ASK_NAME

async def ask_birth_year(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    year = update.message.text
    if len(year) == 10 and year[:2].isdigit() and year[3:5].isdigit() and year[6:].isdigit() and int(year[6:])<datetime.datetime.now().year and int(year[:2])<32 and int(year[3:5])<13:
        if int(year[3:5]) == 2 and int(year[:2])>29:
            await update.message.reply_text("–¢—É“ì–∏–ª–≥–∞–Ω —Å–∞–Ω–∞–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ò–ª—Ç–∏–º–æ—Å –Ω–∞–º—É–Ω–∞–¥–∞–≥–∏–¥–µ–∫ “õ–∏–ª–∏–±, “õ–∞–π—Ç–∞ —é–±–æ—Ä–∏–Ω–≥!\n–ù–∞–º—É–Ω–∞: 02-02-2004")
            return ASK_BIRTH_YEAR
        else:
            context.user_data['Birth Year'] = year
            await update.message.reply_text("üéì –¢–∞—ä–ª–∏–º –¥–∞—Ä–∞–∂–∞–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥: ",
                                            reply_markup=ReplyKeyboardMarkup([[KeyboardButton(option)] for option in EDUCATION_OPTIONS], one_time_keyboard=True, resize_keyboard=True))
            return ASK_EDUCATION
    else:
        await update.message.reply_text("–¢—É“ì–∏–ª–≥–∞–Ω —Å–∞–Ω–∞–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ò–ª—Ç–∏–º–æ—Å –Ω–∞–º—É–Ω–∞–¥–∞–≥–∏–¥–µ–∫ “õ–∏–ª–∏–±, “õ–∞–π—Ç–∞ —é–±–æ—Ä–∏–Ω–≥!\n–ù–∞–º—É–Ω–∞: 02-02-2004")
        return ASK_BIRTH_YEAR

async def ask_education(update: Update, context: ContextTypes.DEFAULT_TYPE):
    education = update.message.text
    print(education)
    if education in EDUCATION_OPTIONS:
        context.user_data['Education Level'] = education
        await update.message.reply_text("üåç –í–∏–ª–æ—è—Ç–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(option)] for option in REGION_OPTIONS], one_time_keyboard=True, resize_keyboard=True))
        return ASK_REGION
    else:
        await update.message.reply_text("–¢–∞—ä–ª–∏–º –¥–∞—Ä–∞–∂–∞–Ω–≥–∏–∑–Ω–∏ “õ—É–π–∏–¥–∞–≥–∏–ª–∞—Ä –æ—Ä–∞—Å–∏–¥–∞–Ω —Ç–∞–Ω–ª–∞–Ω–≥! ")
        return ASK_EDUCATION

async def ask_region(update: Update, context: ContextTypes.DEFAULT_TYPE) :
    region = update.message.text
    print(region)
    if region in REGION_OPTIONS:
        context.user_data['Region'] = region
        await update.message.reply_text("üåç –Ø—à–∞—à —Ç—É–º–∞–Ω–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:",
                                        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(option)] for option in DISTRICT[region]], one_time_keyboard=True, resize_keyboard=True))
        return ASK_DISTRICT
    else:
        await update.message.reply_text("üåç –í–∏–ª–æ—è—Ç–∏–Ω–≥–∏–∑–Ω–∏ “õ–∞–π—Ç–∞ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(option)] for option in REGION_OPTIONS], one_time_keyboard=True, resize_keyboard=True))
        return ASK_REGION

async def ask_district(update: Update, context: ContextTypes.DEFAULT_TYPE):
    district = update.message.text
    if district:
        context.user_data['District'] = district
        await update.message.reply_text("üìû –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:",
                                        reply_markup=ReplyKeyboardMarkup([PHONE_OPTIONS], one_time_keyboard=True,
                                        resize_keyboard=True))
        return ASK_PHONE
    else:
        await update.message.reply_text("üåç –Ø—à–∞—à —Ç—É–º–∞–Ω–∏–Ω–≥–∏–∑–Ω–∏ “õ–∞–π—Ç–∞ —Ç–∞–Ω–ª–∞–Ω–≥:")
        return ASK_DISTRICT

async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.contact.phone_number
    print(phone)
    if phone:
        print(phone)
        context.user_data['Phone Number'] = phone
        await update.message.reply_text("üìû “ö—û—à–∏–º—á–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑ –±–æ—Ä–º–∏ ? (“≤–∞/–ô—û“õ)",
                                        reply_markup=ReplyKeyboardMarkup([OPTIONS_OF], one_time_keyboard=True, resize_keyboard=True))
        return ASK_ADDITIONAL_PHONE
    else:
        await update.message.reply_text("“ö–∞–π—Ç–∞–¥–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç —É–ª–∞—à–∏—à —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥!")
        return ASK_PHONE


async def manual_numbers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    number = update.message.text
    if number.isdigit() and len(number) >= 9:
        context.user_data['Additional Phone Number'] = number
        await update.message.reply_text("üíç “≤–æ–∑–∏—Ä–≥–∏ –æ–∏–ª–∞–≤–∏–π “≥–æ–ª–∞—Ç–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:",
                                        reply_markup=ReplyKeyboardMarkup([MARRITAL_STATUS_OPTIONS],
                                                                         one_time_keyboard=True))
        return ASK_MARITAL_STATUS
    else:
        await update.message.reply_text("“ö–∞–π—Ç–∞–¥–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ –Ω–∞–º—É–Ω–∞–¥–∞–≥–∏–¥–µ–∫ —é–±–æ—Ä–∏–Ω–≥! \n(–ù–∞–º—É–Ω–∞: 991234567)")
        return ASK_PHONE_MANUAL

async def ask_additional_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    phone = update.message.text
    if phone == "“≤–∞":
        await update.message.reply_text("“ö–∞–π—Ç–∞–¥–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ –Ω–∞–º—É–Ω–∞–¥–∞–≥–∏–¥–µ–∫ —é–±–æ—Ä–∏–Ω–≥! \n(–ù–∞–º—É–Ω–∞: 991234567)")
        return ASK_PHONE_MANUAL
    if phone == "–ô—û“õ":
        context.user_data['Additional Phone Number'] = "N/A"
        await update.message.reply_text("üíç “≤–æ–∑–∏—Ä–≥–∏ –æ–∏–ª–∞–≤–∏–π “≥–æ–ª–∞—Ç–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:",
                                        reply_markup=ReplyKeyboardMarkup([MARRITAL_STATUS_OPTIONS],
                                        one_time_keyboard=True))
        return ASK_MARITAL_STATUS
    else:
        return ASK_ADDITIONAL_PHONE

async def ask_marital_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        married = update.message.text
        if married in MARRITAL_STATUS_OPTIONS:
            context.user_data['Marital Status'] = married
            await update.message.reply_text("–û—Ö–∏—Ä–≥–∏ –∏—à –∂–æ–π–∏–Ω–≥–∏–∑ “õ–∞–µ—Ä–ª–∏–≥–∏ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç –±–µ—Ä–∏–Ω–≥:")
            return ASK_WORKPLACE
        else:
            return ASK_MARITAL_STATUS

async def ask_workplace(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    workplace = update.message.text
    if not workplace.isdigit():
        context.user_data['Previous Workplace'] = workplace
        await update.message.reply_text("üí∞ “ö–∞–Ω—á–∞ –º–∞–æ—à –∫—É—Ç–º–æ“õ–¥–∞—Å–∏–∑ ?", reply_markup=ReplyKeyboardMarkup([[KeyboardButton(option)] for option in EXPECTED_SALARY_OPTIONS], one_time_keyboard=True))
        return ASK_EXPECTED_SALARY
    else:
        await update.message.reply_text("–û—Ö–∏—Ä–≥–∏ –∏—à –∂–æ–π–∏–Ω–≥–∏–∑ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∏–ª—Ç–∏–º–æ—Å “õ–∞–π—Ç–∞–¥–∞–Ω –∫–∏—Ä–∏—Ç–∏–Ω–≥:")
        return ASK_WORKPLACE

async def ask_expected_salary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    salary = update.message.text
    if salary in EXPECTED_SALARY_OPTIONS:
        context.user_data['Expected Salary'] = salary
        await update.message.reply_text("‚è≥ –ë–∏–∑ –±–∏–ª–∞–Ω “õ–∞–Ω—á–∞ –º—É–¥–¥–∞—Ç –¥–∞–≤–æ–º–∏–¥–∞ –±–∏—Ä–≥–∞ –∏—à–ª–∞–π –æ–ª–∞—Å–∏–∑?", reply_markup=ReplyKeyboardMarkup([[KeyboardButton(option)] for option in EXPECTED_LENGTH_OPTIONS], one_time_keyboard=True))
        return ASK_EXPECTED_LENGTH
    else:
        await update.message.reply_text("“ö–∞–Ω—á–∞ –º–∞–æ—à –∫—É—Ç–º–æ“õ–¥–∞—Å–∏–∑ ?")
        return ASK_EXPECTED_SALARY

async def ask_expected_length(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    length = update.message.text
    if length in EXPECTED_LENGTH_OPTIONS:
        context.user_data['Expected Length'] = length
        await update.message.reply_text("üó£ “ö–∞–π—Å–∏ —Ç–∏–ª–ª–∞—Ä–Ω–∏ –±–∏–ª–∞—Å–∏–∑?", reply_markup=ReplyKeyboardMarkup([[KeyboardButton(option)] for option in LANGUAGE_OPTIONS], one_time_keyboard=True, resize_keyboard=True))
        return ASK_LANGUAGE
    else:
        await update.message.reply_text("–ë–∏–∑ –±–∏–ª–∞–Ω “õ–∞–Ω—á–∞ –º—É–¥–¥–∞—Ç –¥–∞–≤–æ–º–∏–¥–∞ –±–∏—Ä–≥–∞ –∏—à–ª–∞–π –æ–ª–∞—Å–∏–∑?")
        return ASK_EXPECTED_LENGTH


async def ask_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    language = update.message.text
    if language in LANGUAGE_OPTIONS:
        context.user_data['Language'] = language
        await update.message.reply_text("üåç –¢–∏–ª –±–∏–ª–∏—à –¥–∞—Ä–∞–∂–∞–Ω–≥–∏–∑–Ω–∏ –∫—û—Ä—Å–∞—Ç–∏–Ω–≥:", reply_markup=ReplyKeyboardMarkup([["–ë–æ—à–ª–∞–Ω“ì–∏—á", "–é—Ä—Ç–∞"], ["–Æ“õ–æ—Ä–∏", "–û–Ω–∞ —Ç–∏–ª–∏–º"]], one_time_keyboard=True, resize_keyboard=True))
        return ASK_LANGUAGE_LEVEL
    else:
        await update.message.reply_text("“ö–∞–π—Å–∏ —Ç–∏–ª–ª–∞—Ä–Ω–∏ –±–∏–ª–∞—Å–∏–∑?")
        return ASK_LANGUAGE

async def ask_language_level(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    language_level = update.message.text
    if language_level in ["–ë–æ—à–ª–∞–Ω“ì–∏—á", "–é—Ä—Ç–∞", "–Æ“õ–æ—Ä–∏", "–û–Ω–∞ —Ç–∏–ª–∏–º"]:
        context.user_data['Language Level'] = language_level
        await update.message.reply_text(
            "üåç “ö—û—à–∏–º—á–∞ –±–æ—à“õ–∞ —Ç–∏–ª–Ω–∏ “≥–∞–º –±–∏–ª–∞—Å–∏–∑–º–∏? (“≤–∞/–ô—û“õ)",
            reply_markup=ReplyKeyboardMarkup([OPTIONS_OF], one_time_keyboard=True)
        )
        return ASK_ADDITIONAL_LANGUAGE
    else:
        await update.message.reply_text("–¢–∏–ª –±–∏–ª–∏—à –¥–∞—Ä–∞–∂–∞–Ω–≥–∏–∑–Ω–∏ –∫—û—Ä—Å–∞—Ç–∏–Ω–≥:")
        return ASK_LANGUAGE_LEVEL

async def ask_additional_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    answer = update.message.text
    if answer == "“≤–∞":
        await update.message.reply_text("üåç “ö—É–π–∏–¥–∞–≥–∏–ª–∞—Ä –æ—Ä–∞—Å–∏–¥–∞–Ω –±–∏–ª–∞–¥–∏–≥–∞–Ω —Ç–∏–ª–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=ReplyKeyboardMarkup([[KeyboardButton(option)] for option in LANGUAGE_OPTIONS], one_time_keyboard=True, resize_keyboard=True))
        return ASK_ADDITIONAL_LANGUAGE_LEVEL
    elif update.message.text == "–ô—û“õ":
        context.user_data['Additional Language'] = "N/A"
        context.user_data['Additional Language Level'] = "N/A"
        await update.message.reply_text(
            "üíª –ö–æ–º–ø—å—é—Ç–µ—Ä —Å–∞–≤–æ–¥—Ö–æ–Ω–ª–∏–∫ –¥–∞—Ä–∞–∂–∞–Ω–≥–∏–∑–Ω–∏ “õ—É–π–∏–¥–∞–≥–∏–ª–∞—Ä –æ—Ä–∞—Å–∏–¥–∞–Ω —Ç–∞–Ω–ª–∞–Ω–≥:",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton(option)] for option in IT_KNOWLEDGE_OPTIONS], one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_IT_KNOWLEDGE
    else:
        await update.message.reply_text("–ò–ª—Ç–∏–º–æ—Å \"“≤–∞\" —ë–∫–∏ \"–ô—û“õ\" —Ç—É–≥–º–∞–ª–∞—Ä–∏–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:")
        return ASK_ADDITIONAL_LANGUAGE

async def ask_additional_language_level(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    additional_language = update.message.text
    if additional_language in LANGUAGE_OPTIONS:
        context.user_data['Additional Language'] = additional_language
        await update.message.reply_text(f"{additional_language} —Ç–∏–ª–∏–Ω–∏ –±–∏–ª–∞–¥–∏–≥–∞–Ω –¥–∞—Ä–∞–∂–∞–Ω–≥–∏–∑–Ω–∏ –∫—û—Ä—Å–∞—Ç–∏–Ω–≥:!", reply_markup=ReplyKeyboardMarkup([["–ë–æ—à–ª–∞–Ω“ì–∏—á", "–é—Ä—Ç–∞"], ["–Æ“õ–æ—Ä–∏", "–û–Ω–∞ —Ç–∏–ª–∏–º"]],
                                                                                            resize_keyboard=True,one_time_keyboard=True))
        return ASK_ADDITIONAL_LANGUAGE_LEVEL_LEVEL
    else:
        await update.message.reply_text("–ò–ª—Ç–∏–º–æ—Å —Ç–∏–ª –±–∏–ª–∏—à –¥–∞—Ä–∞–∂–∞–Ω–≥–∏–∑–Ω–∏ “õ–∞–π—Ç–∞–¥–∞–Ω —Ç–∞–Ω–ª–∞–Ω–≥:")
        return ASK_ADDITIONAL_LANGUAGE_LEVEL

async def ask_additional_language_level_level(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    additional_language_level = update.message.text
    if additional_language_level in ["–ë–æ—à–ª–∞–Ω“ì–∏—á", "–é—Ä—Ç–∞","–Æ“õ–æ—Ä–∏", "–û–Ω–∞ —Ç–∏–ª–∏–º"]:
        context.user_data['Additional Language Level'] = additional_language_level
        await update.message.reply_text(
            "üíª –ö–æ–º–ø—å—é—Ç–µ—Ä —Å–∞–≤–æ–¥—Ö–æ–Ω–ª–∏–∫ –¥–∞—Ä–∞–∂–∞–Ω–≥–∏–∑–Ω–∏ “õ—É–π–∏–¥–∞–≥–∏–ª–∞—Ä –æ—Ä–∞—Å–∏–¥–∞–Ω —Ç–∞–Ω–ª–∞–Ω–≥:",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton(option)] for option in IT_KNOWLEDGE_OPTIONS], one_time_keyboard=True,resize_keyboard=True))
        return ASK_IT_KNOWLEDGE
    else:
        await update.message.reply_text("What is your level of knowledge!",
                                        reply_markup=ReplyKeyboardMarkup(
                                            [["–ë–æ—à–ª–∞–Ω“ì–∏—á", "–é—Ä—Ç–∞"],["–Æ“õ–æ—Ä–∏", "–û–Ω–∞ —Ç–∏–ª–∏–º"]],
                                            one_time_keyboard=True, resize_keyboard=True))
        return ASK_ADDITIONAL_LANGUAGE_LEVEL_LEVEL


async def ask_it_knowledge(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    it_knowledge = update.message.text
    if it_knowledge in IT_KNOWLEDGE_OPTIONS:
        context.user_data['IT Knowledge'] = it_knowledge
        await update.message.reply_text(
            "üë§ –ë–∏–∑ “≥–∞“õ–∏–º–∏–∑–¥–∞ “õ–∞–µ—Ä–¥–∞–Ω —Ö–∞–±–∞—Ä —Ç–æ–ø–¥–∏–Ω–≥–∏–∑. –ñ–∞–≤–æ–±–ª–∞—Ä –æ—Ä–∞—Å–∏–¥–∞–Ω —Ç–∞–Ω–ª–∞–Ω–≥:",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton(option)] for option in SOURCE_OPTIONS], one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_SOURCE
    else:
        await update.message.reply_text("–ö–æ–º–ø—å—é—Ç–µ—Ä —Å–∞–≤–æ–¥—Ö–æ–Ω–ª–∏–∫ –¥–∞—Ä–∞–∂–∞–Ω–≥–∏–∑–Ω–∏ “õ—É–π–∏–¥–∞–≥–∏–ª–∞—Ä –æ—Ä–∞—Å–∏–¥–∞–Ω —Ç–∞–Ω–ª–∞–Ω–≥:")
        return ASK_IT_KNOWLEDGE

async def ask_source(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    source = update.message.text
    if source in SOURCE_OPTIONS:
        context.user_data['Source'] = source
        context.user_data['isLiked'] = False
        MESSAGE = (f"–ò—Å–º-—à–∞—Ä–∏—Ñ–∏–Ω–≥–∏–∑: {context.user_data['Name']}\n"
                        f"–¢—É“ì–∏–ª–≥–∞–Ω —Å–∞–Ω–∞–Ω–≥–∏–∑: {context.user_data['Birth Year']}\n"
                        f"–¢–∞—ä–ª–∏–º –¥–∞—Ä–∞–∂–∞–Ω–≥–∏–∑: {context.user_data['Education Level']}\n"
                        f"–í–∏–ª–æ—è—Ç–∏–Ω–≥–∏–∑: {context.user_data['Region']}\n"
                        f"–Ø—à–∞—à —Ç—É–º–∞–Ω–∏–Ω–≥–∏–∑: {context.user_data['District']}\n"
                        f"–¢–µ–ª: {context.user_data['Phone Number']}\n"
                        f"“ö—û—à–∏–º—á–∞ —Ç–µ–ª–µ—Ñ–æ–Ω: {context.user_data['Additional Phone Number']}\n"
                        f"–û–∏–ª–∞–≤–∏–π “≥–æ–ª–∞—Ç–∏–Ω–≥–∏–∑: {context.user_data['Marital Status']}\n"
                        f"–û—Ö–∏—Ä–≥–∏ –∏—à –∂–æ–π–∏–Ω–≥–∏–∑: {context.user_data['Previous Workplace']}\n"
                        f"–ö—É—Ç–∏–ª–∞—ë—Ç–≥–∞–Ω –º–∞–æ—à: {context.user_data['Expected Salary']}\n"
                        f"–ö—É—Ç–∏–ª–∞—ë—Ç–≥–∞–Ω –∏—à –º—É–¥–¥–∞—Ç–∏: {context.user_data['Expected Length']}\n"
                        f"–¢–∏–ª(1): {context.user_data['Language']}\n"
                        f"–¢–∏–ª(1) –±–∏–ª–∏—à –¥–∞—Ä–∞–∂–∞–Ω–≥–∏–∑: {context.user_data['Language Level']}\n"
                        f"–¢–∏–ª(1): {context.user_data['Additional Language']}\n"
                        f"–¢–∏–ª(2) –±–∏–ª–∏—à –¥–∞—Ä–∞–∂–∞–Ω–≥–∏–∑: {context.user_data['Additional Language Level']}\n"
                        f"–ö–æ–º–ø—å—é—Ç–µ—Ä —Å–∞–≤–æ–¥—Ö–æ–Ω–ª–∏–∫ –¥–∞—Ä–∞–∂–∞–Ω–≥–∏–∑: {context.user_data['IT Knowledge']}\n"
                        f"–ë–∏–∑ “≥–∞“õ–∏–º–∏–∑–¥–∞: {context.user_data['Source']}\n")
        await update.message.reply_text(MESSAGE)
        await update.message.reply_text(
            "ü•≥ –†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à –∂–∞—Ä–∞—ë–Ω–∏–Ω–∏ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —è–∫—É–Ω–ª–∞–≥–∞–Ω–∏–Ω–≥–∏–∑ –±–∏–ª–∞–Ω —Ç–∞–±—Ä–∏–∫–ª–∞–π–º–∏–∑! \n–ò–ª—Ç–∏–º–æ—Å –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ “õ–∞–π—Ç–∞ –∫—û—Ä–∏–± —á–∏“õ–∏–Ω–≥ –≤–∞ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–≥.",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton(text="–¢–∞—Å–¥–∏“õ–ª–∞—à")],
                                              [KeyboardButton(text="“ö–∞–π—Ç–∞ –±–æ—à–ª–∞—à")]], resize_keyboard=True, one_time_keyboard=True)
        )
        return CONFIRMATION
    else:
        await update.message.reply_text("üë§ –ë–∏–∑ “≥–∞“õ–∏–º–∏–∑–¥–∞ “õ–∞–µ—Ä–¥–∞–Ω —Ö–∞–±–∞—Ä —Ç–æ–ø–¥–∏–Ω–≥–∏–∑. –ñ–∞–≤–æ–±–ª–∞—Ä –æ—Ä–∞—Å–∏–¥–∞–Ω —Ç–∞–Ω–ª–∞–Ω–≥:")
        return ASK_SOURCE

async def confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    confirmation_of = update.message.text
    if confirmation_of == "–¢–∞—Å–¥–∏“õ–ª–∞—à":
        da_ta = list(context.user_data.values())
        send_message(f"–ù–æ–º–∑–æ–¥ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç:\n\n"
                     f"–ò—Å–º-—à–∞—Ä–∏—Ñ–∏: {context.user_data['Name']}\n"
                     f"–¢—É“ì–∏–ª–≥–∞–Ω —Å–∞–Ω–∞—Å–∏: {context.user_data['Birth Year']}\n"
                     f"–¢–∞—ä–ª–∏–º –¥–∞—Ä–∞–∂–∞—Å–∏: {context.user_data['Education Level']}\n"
                     f"–í–∏–ª–æ—è—Ç–∏: {context.user_data['Region']}\n"
                     f"–Ø—à–∞—à —Ç—É–º–∞–Ω–∏: {context.user_data['District']}\n"
                     f"–¢–µ–ª: {context.user_data['Phone Number']}\n"
                     f"“ö—û—à–∏–º—á–∞ —Ç–µ–ª–µ—Ñ–æ–Ω: {context.user_data['Additional Phone Number']}\n"
                     f"–¢–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç: {context.user_data['username']}\n"
                     f"–û–∏–ª–∞–≤–∏–π “≥–æ–ª–∞—Ç–∏: {context.user_data['Marital Status']}\n"
                     f"–û—Ö–∏—Ä–≥–∏ –∏—à –∂–æ–π–∏: {context.user_data['Previous Workplace']}\n"
                     f"–ö—É—Ç–∏–ª–∞—ë—Ç–≥–∞–Ω –º–∞–æ—à: {context.user_data['Expected Salary']}\n"
                     f"–ö—É—Ç–∏–ª–∞—ë—Ç–≥–∞–Ω –∏—à –º—É–¥–¥–∞—Ç–∏: {context.user_data['Expected Length']}\n"
                     f"–¢–∏–ª(1): {context.user_data['Language']}\n"
                     f"–¢–∏–ª(1) –±–∏–ª–∏—à –¥–∞—Ä–∞–∂–∞—Å–∏: {context.user_data['Language Level']}\n"
                     f"–¢–∏–ª(1): {context.user_data['Additional Language']}\n"
                     f"–¢–∏–ª(2) –±–∏–ª–∏—à –¥–∞—Ä–∞–∂–∞—Å–∏: {context.user_data['Additional Language Level']}\n"
                     f"–ö–æ–º–ø—å—é—Ç–µ—Ä —Å–∞–≤–æ–¥—Ö–æ–Ω–ª–∏–∫ –¥–∞—Ä–∞–∂–∞—Å–∏: {context.user_data['IT Knowledge']}\n"
                     f"–ë–∏–∑ “≥–∞“õ–∏–º–∏–∑–¥–∞: {context.user_data['Source']}\n")
        print(da_ta)
        keyboard_1 = [[InlineKeyboardButton("Instagram —Å–∞“≥–∏—Ñ–∞–º–∏–∑üëáüëáüëá", url="https://www.instagram.com/profter_uz/profilecard/?igsh=N2F5YWZtZmNwNTR0")]]
        reply_markup_3 = InlineKeyboardMarkup(keyboard_1)
        await update.message.reply_text("‚úÖ –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏. –¢–µ–∑ –æ—Ä–∞–¥–∞ —Å–∏–∑ –±–∏–ª–∞–Ω —Ö–æ–¥–∏–º–ª–∞—Ä–∏–º–∏–∑ –±–æ“ì–ª–∞–Ω–∞–¥–∏ üòä.\n\n–ë–∏–∑–Ω–∏ –∏–∂—Ç–∏–º–æ–∏–π —Ç–∞—Ä–º–æ“õ–ª–∞—Ä–¥–∞ –∫—É–∑–∞—Ç–∏–± –±–æ—Ä–∏—à–Ω–∏ —É–Ω—É—Ç–º–∞–Ω–≥!\n",
                                        reply_markup=reply_markup_3)
        insert_data_to(da_ta)
        return ConversationHandler.END
    elif confirmation_of == "“ö–∞–π—Ç–∞ –±–æ—à–ª–∞—à":
        await update.message.reply_text("‚úèÔ∏è –ë–∏—Ä–æ–∑ –∫—É—Ç–∏–Ω–≥....\n–î–∞—Å—Ç—É—Ä “õ–∞–π—Ç–∞ –∏—à–≥–∞ —Ç—É—à–∏—Ä–∏–ª–º–æ“õ–¥–∞....")
        time.sleep(5)
        await update.message.reply_text("–¢—û–ª–∏“õ –∏—Å–º-—à–∞—Ä–∏—Ñ–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥: ")
        return ASK_NAME
    else:
        await update.message.reply_text("–ò–ª—Ç–∏–º–æ—Å –±–∏—Ä–æ–∑–¥–∞–Ω —Å—û–Ω–≥ “õ–∞–π—Ç–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥!")
        return CONFIRMATION

from telegram.ext import ConversationHandler

def main() -> None:
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("help", help_command))
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME_1: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_BIRTH_YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_birth_year)],
            ASK_EDUCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_education)],
            ASK_REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_region)],
            ASK_DISTRICT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_district)],
            ASK_PHONE: [MessageHandler(filters.CONTACT & ~filters.COMMAND, ask_phone)],
            ASK_ADDITIONAL_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_additional_phone)],
            ASK_PHONE_MANUAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, manual_numbers)],
            ASK_MARITAL_STATUS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_marital_status)],
            ASK_WORKPLACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_workplace)],
            ASK_EXPECTED_SALARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_expected_salary)],
            ASK_EXPECTED_LENGTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_expected_length)],
            ASK_LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_language)],
            ASK_LANGUAGE_LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_language_level)],
            ASK_ADDITIONAL_LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_additional_language)],
            ASK_ADDITIONAL_LANGUAGE_LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_additional_language_level)],
            ASK_ADDITIONAL_LANGUAGE_LEVEL_LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_additional_language_level_level)],
            ASK_IT_KNOWLEDGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_it_knowledge)],
            ASK_SOURCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_source)],
            CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirmation)],
        },
        fallbacks=[CommandHandler("start", start)],
    )
    app.add_handler(conv_handler)
    app.run_polling()
if __name__ == "__main__":
    main()
